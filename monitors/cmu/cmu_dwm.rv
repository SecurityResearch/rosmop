#include "rv/dwmonitor.h"
#include "rv/okaytogo.h"
#include "rv/obstacle.h"
#include "ros/ros.h"

#include <landshark_gps/GpsProjection.h>

#include <string>
#include <stdlib.h>

cmu_dwm(){

//Global vars for messages
sensor_msgs::NavSatFix msgGps;
geometry_msgs::PointStamped msgGpsMeters;
sensor_msgs::NavSatFix msgObstacleGps;
landshark::GpsProjection gpsProjection;

nav_msgs::Odometry msgOdom;
nav_msgs::Odometry msgOdomObstacle;

geometry_msgs::TwistStamped msgBaseVelocity;

landshark_msgs::BoolStamped msgCmuDynamicWindowMonitorStatus;
landshark_msgs::BoolStamped msgCmuSensorZtestMonitorStatus;

landshark_msgs::TriggerAlarm msgTriggerAlarm;
landshark_msgs::TriggerAlarm msgCmuDynamicWindowMonitorTrigger;

landshark_msgs::ResetAlarm msgResetAlarm;
landshark_msgs::ResetAlarm msgCmuDynamicWindowMonitorReset;

landshark_msgs::BoolStamped msgCmuDynamicWindowMonitorControl;
landshark_msgs::BoolStamped msgCmuSensorZtestMonitorControl;
//--------------------------------------------------------------------------


//Global vars
  bool latch;
  std::string paramName;
  
  double origin_lat; double origin_lon;
  
  double clearanceDist1; double clearanceDist2;
  double accel_lin_max; double accel_ang_max; 
  double max_obs_vel; double max_obs_dist; 
  double vel_lin_max; double vel_ang_max; 
  double epsilon; double dt;
  double outer_radius; double inner_radius;

  double obstacle_meters_x_reset; 
  double obstacle_meters_y_reset;
  double obstacle_meters_x; 
  double obstacle_meters_y; 
  double obstacle_gps_x_reset; 
  double obstacle_gps_y_reset;
  double obstacle_gps_x; 
  double obstacle_gps_y; 
  double robot_meters_x,robot_meters_y;

  bool okayBoolOuter; //= false;
  bool dwmonitorOkayBool; //= false; 
  
//  bool useMsgAuth = true;
//--------------------------------------------------------------------------


//init
init(){
  origin_lat = 37.4571014863;  origin_lon = -122.173496991;
  
  clearanceDist1 = 0; clearanceDist2 = 0;
  accel_lin_max = 4.0; accel_ang_max = 4.0; 
  max_obs_vel = 1.0; max_obs_dist = 10.0; 
  vel_lin_max = 1.0; vel_ang_max = 1.0; 
  epsilon = 0.25; dt = 0.05;
  outer_radius = 10.0; inner_radius = 2.5;
//set obstacle far away, same as during a ResetAlarm  
  obstacle_meters_x_reset = 10000.0; 
  obstacle_meters_y_reset = 10000.0;
  obstacle_meters_x = 10000.0; 
  obstacle_meters_y = 10000.0; 
  obstacle_gps_x_reset = 40.443181; 
  obstacle_gps_y_reset = -79.943060;
  obstacle_gps_x = 40.443181; 
  obstacle_gps_y = -79.943060; 
  robot_meters_x,robot_meters_y;

  msgObstacleGps.latitude = obstacle_meters_x_reset;
  msgObstacleGps.longitude = obstacle_meters_x_reset;
}
//--------------------------------------------------------------------------


//event specifications
  event getGps() /landshark/gps sensor_msgs/NavSatFix '{}'
  {
    msgGps = MESSAGE; 
  }

  event getGpsMeters() /landshark/gps_meters geometry_msgs/PointStamped
        '{}'
  {
    msgGpsMeters = MESSAGE;
  }
  
    event getObstacleGps() /landshark/cmu_dynamic_window_monitor/obstacle sensor_msgs/NavSatFix
        '{}'
  {
    msgObstacleGps = MESSAGE;
  }

  event getOdom() /landshark/odom nav_msgs/Odometry '{}'
  {
    msgOdom = MESSAGE; 
  }

//  event getOdomObstacle() /landshark/gps nav_msgs/Odometry '{}'
//  {
//    msgOdomObstacle = MESSAGE; 
//  }

  event getBaseVelocity() /landshark_control/base_velocity geometry_msgs/TwistStamped '{}'
  {
    msgBaseVelocity = MESSAGE; 
  }

  event getCmuDynamicWindowMonitorReset() /landshark_control/reset_alarm landshark_msgs/ResetAlarm '{}'
  {
    msgCmuDynamicWindowMonitorReset = MESSAGE; 
  }

  event getCmuDynamicWindowMonitorControl() /landshark/cmu_dynamic_window_monitor/control landshark_msgs/BoolStamped '{}'
  {
    msgCmuDynamicWindowMonitorControl = MESSAGE; 
  }

//z test events not included

  //Tick event which is used to simulate timer. It corresponds to ros::Rate rate(30.0); while(ros::ok()){}
  event getTicks() /landshark/uiuc_timeticks/5hz landshark_msgs/BoolStamped '{}'
  {
    robot_meters_x = msgGpsMeters.point.x;
    robot_meters_y = msgGpsMeters.point.y;
 
    rawmonitor();
  }
//--------------------------------------------------------------------------


//raw monitor
  rawmonitor()
  {
      if (msgCmuDynamicWindowMonitorControl.data)
      {
      	ROS_INFO("\nOperating with Dynamic Window monitor...");
 
		ros::Time stamp = ros::Time::now();
		msgTriggerAlarm.header.stamp = stamp;
		msgTriggerAlarm.header.seq = msgCmuDynamicWindowMonitorStatus.header.seq;
//      ROS_INFO("\nmsgCmuDynamicWindowMonitorStatus.data = true;\n");
      	msgCmuDynamicWindowMonitorStatus.data = true; 

	    obstacle_meters_x = msgObstacleGps.longitude;
    	obstacle_meters_y = msgObstacleGps.latitude;
      
//      ROS_INFO("\n msgAnomaly.anomaly_detected = %d",msgAnomaly.anomaly_detected);
      
      okayToGo(
        robot_meters_x, robot_meters_y, obstacle_meters_x, obstacle_meters_y,
        msgBaseVelocity.twist.linear.x, msgBaseVelocity.twist.angular.z, dt,
        accel_lin_max, inner_radius, outer_radius,
        okayBoolOuter, dwmonitorOkayBool);  
        
//      ROS_INFO("dwmonitorOkayBool = %d",dwmonitorOkayBool);       

      if (!dwmonitorOkayBool) 
      {
		//ROS_INFO("\ndwmonitorOkayBool = %d", dwmonitorOkayBool);
		ROS_INFO("\nCollision avoided");
        msgTriggerAlarm.node_name = "/landshark/cmu_dynamic_window_monitor";
        msgTriggerAlarm.description = "robot is inside dynamic window";        

        PUBLISH("/landshark_control/trigger_alarm","landshark_msgs::TriggerAlarm",msgTriggerAlarm); 
      }
    } 
    else
    {
//      ROS_INFO("\nmsgCmuDynamicWindowMonitorStatus.data = false;\n");
      msgCmuDynamicWindowMonitorStatus.data = false; 
      msgObstacleGps.latitude = obstacle_gps_x_reset;
      msgObstacleGps.longitude = obstacle_gps_y_reset;

//      pubResetAlarm.publish(msgResetAlarm);

    }

//    if (useMsgAuth)
//    {
//      authPubCmuDynamicWindowMonitorStatus.publish(\
//      msgCmuDynamicWindowMonitorStatus);
//    }
//    else
//    {
      PUBLISH("/landshark/cmu_dynamic_window_monitor/status","landshark_msgs::BoolStamped",msgCmuDynamicWindowMonitorStatus);
//    }
  }  
  
}

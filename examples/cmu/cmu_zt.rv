#include "rv/multi_window_motion_gps_odo_anomaly_monitor.h"
#include <stdlib.h>
#include <ros/ros.h>

cmu_z_test(){

//only declare a failure if above this confidence
double anomaly_thresh;
//play alarm sound?
bool play_alarm_sound = false;
//is the execution monitor currently paused?
bool paused = true;
bool isActive = false;
int isAnomaly;

MotionGpsOdoAnomalyMonitor motionMonitor;

landshark_msgs::TriggerAlarm msgTriggerAlarmZ;

//initialization
init(){
anomaly_thresh = 0.4;
play_alarm_sound = false;

isActive = false;
motionMonitor.init();
}

event processStateControl(unsigned char d) /landshark/cmu_z_test_monitor/control landshark_msgs/BoolStamped '{data: d}'
{
  if (!d)
  {
	isActive = false;
  }
  else
  {
	isActive = true;
	motionMonitor.reset();
  }
}

event timerEvent() /landshark/uiuc_timeticks/5hz landshark_msgs/BoolStamped '{}'
{
  if (isActive)
  {
    isAnomaly = motionMonitor.run();
  }
  
  rawmonitor();
}

event anomalyPublisher() /landshark/cmu_z_test_monitor/AnomalyMonitor cmu_z_test_monitor/AnomalyMsg '{}'
{

}

event odometrySubscriber() /landshark/odom nav_msgs/Odometry '{}'
{
  nav_msgs::Odometry msg = MESSAGE;

  motionMonitor.odometryCallback(msg);
}

event gpsSubscriber() /landshark/gps_meters geometry_msgs/PointStamped '{}'
{
  geometry_msgs::PointStamped msg = MESSAGE;

  motionMonitor.gpsCallback(msg);
}

//rawmonitor
rawmonitor(){

	landshark_msgs::BoolStamped stateStatusMsg;
	stateStatusMsg.header.stamp = ros::Time::now();
	stateStatusMsg.data = isActive;

	PUBLISH("/landshark/cmu_z_test_monitor/status", "landshark_msgs::BoolStamped", stateStatusMsg);

	if (isActive)
	{			
		ROS_INFO("\nOperating with Z Test monitor...");
		ROS_INFO("\nisAnomaly = %d",isAnomaly);
		if (isAnomaly==1)
		{
			msgTriggerAlarmZ.node_name = "/landshark/cmu_z_test_monitor";
			msgTriggerAlarmZ.description = "robot sensors have failed ztest";
			PUBLISH("/landshark_control/trigger_alarm","landshark_msgs::TriggerAlarm",msgTriggerAlarmZ); 
		}
	}
}

}
